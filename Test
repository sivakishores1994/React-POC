import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import { useDispatch } from 'react-redux';
import MyComponent from './MyComponent';
import { getFields } from './actions';

// Mock useDispatch and getFields
jest.mock('react-redux', () => ({
  useDispatch: jest.fn(),
}));

jest.mock('./actions', () => ({
  getFields: jest.fn(),
}));

describe('MyComponent', () => {
  let mockDispatch;

  beforeEach(() => {
    // Mock the dispatch function
    mockDispatch = jest.fn();
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('should call dispatch with correct arguments and update state', () => {
    const mockStageComponents = ['component1', 'component2'];
    // Mock the return value of dispatch
    mockDispatch.mockReturnValue(mockStageComponents);
    // Mock getFields to verify its call
    (getFields as jest.Mock).mockReturnValue('mockGetFieldsAction');

    const { getByText } = render(<MyComponent />);
    const button = getByText('Add Alias');

    // Trigger the function by clicking the button
    fireEvent.click(button);

    // Verify dispatch was called with the action from getFields
    expect(getFields).toHaveBeenCalledWith(
      'stageSelector',
      'aliasSelector',
      'add'
    );
    expect(mockDispatch).toHaveBeenCalledWith('mockGetFieldsAction');

    // Verify that setField was called with the returned components
    expect(mockDispatch).toHaveReturnedWith(mockStageComponents);
  });
});
