import React from "react";
import { render, fireEvent } from "@testing-library/react";
import { Provider } from "react-redux";
import configureStore from "redux-mock-store";
import Footer from "./Footer";
import { CONSTANTS } from "../../../utils/common/constants";
import { getUrl } from "../../../utils/common/change.utils";

// Mocking dependencies
jest.mock("../../../utils/common/change.utils", () => ({
  getUrl: {
    getUrlEndPoint: jest.fn(),
  },
}));

const mockStore = configureStore([]);

describe("Footer Component", () => {
  let store: any;
  let props: any;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageId: "rp",
            stageInfo: {
              products: [
                {
                  product_category: "CC",
                  product_type: "280",
                },
              ],
            },
          },
        ],
      },
    });

    props = {
      backHandler: jest.fn(),
      journeyType: "ETC",
      validateNxt: "",
      otherMyinfo: false,
      uploadJourney: false,
    };

    (getUrl.getUrlEndPoint as jest.Mock).mockReturnValue("acknowledge");
  });

  it("renders without crashing", () => {
    const { getByText } = render(
      <Provider store={store}>
        <Footer {...props} />
      </Provider>
    );

    expect(getByText("Agree and Submit")).toBeInTheDocument();
  });

  it("calls backHandler on back button click", () => {
    props.backHandler = jest.fn();
    store = mockStore({
      stages: {
        stages: [
          {
            stageId: "BD_2",
            stageInfo: { products: [{ product_category: "CC", product_type: "280" }] },
          },
        ],
      },
    });

    const { getByText } = render(
      <Provider store={store}>
        <Footer {...props} />
      </Provider>
    );

    const backButton = getByText("Back");
    fireEvent.click(backButton);

    expect(props.backHandler).toHaveBeenCalledTimes(1);
  });

  it("shows spinner when `urlEndpoint` is acknowledge or preserve", () => {
    (getUrl.getUrlEndPoint as jest.Mock).mockReturnValue("acknowledge");

    const { container } = render(
      <Provider store={store}>
        <Footer {...props} />
      </Provider>
    );

    const spinner = container.querySelector(".circle-spinner");
    expect(spinner).toBeInTheDocument();
  });

  it("hides back button when stageId is SSF_1", () => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageId: CONSTANTS.STAGE_NAMES.SSF_1,
            stageInfo: {
              products: [
                {
                  product_category: "CC",
                  product_type: "280",
                },
              ],
            },
          },
        ],
      },
    });

    const { queryByText } = render(
      <Provider store={store}>
        <Footer {...props} />
      </Provider>
    );

    const backButton = queryByText("Back");
    expect(backButton).not.toBeInTheDocument();
  });

  it("renders 'Proceed to Get Loan' button for ETC journeyType with specific conditions", () => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageId: CONSTANTS.STAGE_NAMES.LD_1,
            stageInfo: {
              products: [
                {
                  product_type: "280",
                },
              ],
            },
          },
        ],
      },
    });

    props.journeyType = "ETC";

    const { getByText } = render(
      <Provider store={store}>
        <Footer {...props} />
      </Provider>
    );

    expect(getByText("Proceed to Get Loan")).toBeInTheDocument();
  });

  it("renders 'Agree and Submit' button when uploadJourney is true", () => {
    props.uploadJourney = true;

    const { getByText } = render(
      <Provider store={store}>
        <Footer {...props} />
      </Provider>
    );

    expect(getByText("Agree and Submit")).toBeInTheDocument();
  });
});
