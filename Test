export const initiateRTOBJourney = (): any => {
  return async (dispatch: AppDispatch) => {
    const flowType = authenticateType() 
    if (flowType === "myinfo") {
      console.log(dispatch(authorize(flowType)));
      await dispatch(authorize(flowType)).then(async (token: any) => {
       if (sessionStorage.getItem("token")) {
          sessionStorage.removeItem("token");
        }
        localStorage.setItem(
          "chRefNo",
          JSON.stringify(token["channelRefNo"])
        );
        if (!sessionStorage.getItem("token")) {
          dispatch(dispatchAuth(true));
          sessionStorage.setItem(
            "token",
            JSON.stringify(token["channelRefNo"])
          );
          dispatch(dispatchLoader(false));
        } else {
          dispatch(dispatchAuth(false));
        }
      });
    } else {
      return dispatch(formConfig("manual"))
        .then((response: any) => {
          return Promise.resolve(response);
        })
        .catch((error: AxiosError) => {
          dispatch(dispatchError(error));
        });
    }
  };
};

export const authorize = (flowType: string): any => {
  let url = '';
  if (flowType === 'myinfo') {
    url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}${submitService.generateUUID}${process.env.REACT_APP_RTOB_MYINFO_AUTHORIZE}`;
    
  } else if (flowType === 'manual') {
    url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}${submitService.generateUUID}${process.env.REACT_APP_RTOB_MANUAL_AUTHORIZE}`;
  }
  const product = filterProducDetails();
  let referParam : string | null | undefined ;
  let referIdParam : string | null | undefined;
      if (getUrl.getParameterByName("refer") === "true") {
        referParam = getUrl.getParameterByName("refer");
      }
      if (getUrl.getParameterByName("referId")) {
        referIdParam = getUrl.getParameterByName("referId");
      }
     
  let application : any = {};

  if(referParam === "true" ){
    application.refer = referParam ;
  }
  if(referIdParam){
    application.referId = referIdParam ;
  }
  let payload: any = [];
  payload = {
    products: sortByAscendingOrder(product),
    myinfo: {
    	redirectUri: `${process.env.REACT_APP_SINGPASS_CALLBACK}`
    }
  };
  if(application.refer || application.referId){
    payload.application = application ;
  }
  return async (dispatch: AppDispatch) => {
    if(getUrl.getAggregatorStatus()){
      const referapplication = payload.application;
      payload.application = await setAggregator()
      if(referapplication && (referapplication.refer || referapplication.referId)){
        payload.application = {...payload.application,...referapplication}
      }
      dispatch(urlParamAction.aggregatorsDetails(payload.application));
    }
    
    return axios
      .post(url, payload)
      .then((response) => {
        if (response.status === 200) {
          dispatch(authorizeAction.getAuthorize(response.data));
          return Promise.resolve(response.data);
        } else {
          defaultError();
        }
      })
      .catch((error) => {
        dispatch(dispatchError(error));
        return Promise.reject(error);
      });
  };
};
