import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { Provider } from "react-redux";
import configureStore from "redux-mock-store";
import SelectionBox from "./SelectionBox";
import { ValueUpdateAction } from "../../../utils/store/value-update-slice";
import { loanTopUpAction } from "../../../utils/store/loan-topup-slice";

const mockStore = configureStore([]);

describe("SelectionBox Component", () => {
  let store;

  const mockProps = {
    data: {
      logical_field_name: "test_field",
      rwb_label_name: "Test Field",
      editable: false,
    },
    handleCallback: jest.fn(),
    handleFieldDispatch: jest.fn(),
    flowType: false,
  };

  beforeEach(() => {
    store = mockStore({
      lov: { lov: [] },
      fielderror: { error: {} },
      stages: {
        stages: [{ stageInfo: { applicants: {}, products: [] }, stageId: "test" }],
        userInput: { applicants: {} },
        myinfoResponse: null,
        dependencyFields: null,
        journeyType: "ETC",
      },
      loanTopUp: { selectedLoan: null, selectedAccount: null },
    });

    store.dispatch = jest.fn();
  });

  it("renders without crashing", () => {
    render(
      <Provider store={store}>
        <SelectionBox {...mockProps} />
      </Provider>
    );

    expect(screen.getByLabelText("Test Field")).toBeInTheDocument();
  });

  it("renders placeholder text correctly", () => {
    render(
      <Provider store={store}>
        <SelectionBox {...mockProps} />
      </Provider>
    );

    expect(screen.getByPlaceholderText("Select the purpose of the account")).toBeInTheDocument();
  });

  it("displays errors when there are validation issues", () => {
    store = mockStore({
      ...store.getState(),
      fielderror: { error: { test_field: "Field error" } },
    });

    render(
      <Provider store={store}>
        <SelectionBox {...mockProps} />
      </Provider>
    );

    expect(screen.getByText(/Please enter Test Field/i)).toBeInTheDocument();
  });

  it("handles dropdown click and close behavior", () => {
    render(
      <Provider store={store}>
        <SelectionBox {...mockProps} />
      </Provider>
    );

    const dropdown = screen.getByLabelText("Test Field");
    fireEvent.click(dropdown);

    expect(screen.getByPlaceholderText("Select the purpose of the account")).toHaveFocus();

    const closeButton = screen.getByText(/close/i);
    fireEvent.click(closeButton);

    expect(screen.queryByText(/close/i)).not.toBeInTheDocument();
  });

  it("dispatches correct Redux actions on value change", () => {
    render(
      <Provider store={store}>
        <SelectionBox {...mockProps} />
      </Provider>
    );

    const inputField = screen.getByPlaceholderText("Select the purpose of the account");

    fireEvent.change(inputField, { target: { value: "test_value" } });

    expect(store.dispatch).toHaveBeenCalledWith(
      ValueUpdateAction.getChangeUpdate({ id: "test", changes: true })
    );
  });

  it("handles existingCashone logic correctly", () => {
    store = mockStore({
      ...store.getState(),
      stages: { ...store.getState().stages, journeyType: "ETC" },
      loanTopUp: { selectedLoan: "loan_123" },
    });

    render(
      <Provider store={store}>
        <SelectionBox {...mockProps} />
      </Provider>
    );

    expect(store.dispatch).toHaveBeenCalledWith(
      loanTopUpAction.setselectedAccount("loan_123")
    );
  });

  it("handles callback on value selection", () => {
    render(
      <Provider store={store}>
        <SelectionBox {...mockProps} />
      </Provider>
    );

    const inputField = screen.getByPlaceholderText("Select the purpose of the account");

    fireEvent.change(inputField, { target: { value: "new_value" } });

    expect(mockProps.handleCallback).toHaveBeenCalledWith(mockProps.data, "new_value");
  });
});
