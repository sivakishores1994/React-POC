export const getBancaEligibleProducts = (data : any): any => {
  let productType = data.stageInfo ? data.stageInfo.products[0].product_type : data.products[0].product_type;
  let productCategory = data.stageInfo ? data.stageInfo.products[0].product_category : data.products[0].product_category;
  let dateOfBirth = data.stageInfo ? data.stageInfo.applicants['date_of_birth_a_1'] : data.applicants['date_of_birth_a_1'];
  let applicantAge = validateService.calculateAge(dateOfBirth);
  let bancaData: any;
  let eligibleBancaInsurances : any = [];
  let eligibleBancaInsuranceInformations : any = [];
  const bancaProductsMappingUrl = `${process.env.REACT_APP_BANCA_PRODUCTS_MAPPING_URL}`;
  return async (dispatch: AppDispatch) => {
      return await fetch(bancaProductsMappingUrl)
        .then((response: any) => {
            return response.json();
        })
        .then(async (productsMappingData: any) => {
                const bancaEligibleProducts = productsMappingData;
                const bancaProductDetailsUrl = `${process.env.REACT_APP_BANCA_PRODUCT_DETAILS_URL}`;
                return await fetch(bancaProductDetailsUrl)
                .then((response: any) => {
                    return response.json();
                })
                .then((productDetailsData: any) => {
                      const bancaProductDetailsInformations = productDetailsData;
                      bancaEligibleProducts.forEach((bancaEligibleProduct: KeyWithAnyModel) => {
                        if(bancaEligibleProduct["ProductCode"] === productType && bancaEligibleProduct["ProductCategory"] === productCategory)
                        {
                          let ageValues = bancaEligibleProduct['InsuranceProductAgeLimit'].split(',');
                          let maxAge = Math.max(...ageValues);
                          let minAge = Math.min(...ageValues);
                          if (applicantAge >= minAge && applicantAge <= maxAge) {
                            eligibleBancaInsurances.push(bancaEligibleProduct["InsuranceProductDetailCode"]);
                            bancaProductDetailsInformations.forEach((bancaProductDetailsInformation: KeyWithAnyModel) => {
                                if(bancaProductDetailsInformation["ProductDetailCode"] === bancaEligibleProduct["InsuranceProductDetailCode"])
                                {
                                  eligibleBancaInsuranceInformations.push(bancaProductDetailsInformation);
                                }
                            });
                            bancaData = {
                              eligible_banca_insurances: eligibleBancaInsurances,
                              eligible_banca_insurance_informations: eligibleBancaInsuranceInformations,
                              banca_product_applicable_a_1: 'Y'
                            } 
                          }
                          else {
                            bancaData = {
                              banca_product_applicable_a_1: 'N'
                            } 
                          }
                        }
                      });
                      dispatch(bancaListAction.getBancaData(bancaData));
                })
        })
  }
};
