import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { Provider, useDispatch } from "react-redux";
import configureStore from "redux-mock-store";
import Amount from "./Amount";

// Mock dependencies
jest.mock("../../../utils/common/change.utils", () => ({
  fieldIdAppend: jest.fn(() => "mock-field-id"),
  isFieldUpdate: jest.fn(),
  isFieldValueUpdate: jest.fn(),
  fieldError: jest.fn(),
}));

jest.mock("react-redux", () => ({
  ...jest.requireActual("react-redux"),
  useDispatch: jest.fn(),
}));

const mockProps = {
  data: {
    logical_field_name: "required_annual_income",
    rwb_label_name: "Annual Income",
    type: "text",
    min_length: 1,
    length: 10,
  },
  handleCallback: jest.fn(),
};

const initialState = {
  stages: {
    stages: [
      {
        stageInfo: {
          applicants: {
            annual_income_a_1: "1200",
          },
        },
      },
    ],
    userInput: {
      applicants: {
        required_annual_income_a_1: "1200",
      },
    },
  },
  fielderror: {
    error: [],
  },
};

describe("Amount Component", () => {
  let store;
  const mockDispatch = jest.fn();

  beforeEach(() => {
    store = configureStore([])(initialState);
    useDispatch.mockReturnValue(mockDispatch);
  });

  it("renders the component with correct label and input", () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );

    expect(screen.getByLabelText("Annual Income")).toBeInTheDocument();
    expect(screen.getByPlaceholderText("Annual Income")).toBeInTheDocument();
  });

  it("updates input value and triggers changeHandler", () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );

    const input = screen.getByLabelText("Annual Income");
    fireEvent.change(input, { target: { value: "1500" } });

    expect(input.value).toBe("1500");
    expect(mockProps.handleCallback).toHaveBeenCalledWith(
      mockProps.data,
      "1500"
    );
  });
});
