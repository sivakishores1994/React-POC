import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import configureMockStore from 'redux-mock-store';
import { Provider } from 'react-redux';
import DropDownModel from './dropdown-model';
import { getFields } from '../selection-box/selection-box.util';

jest.mock('../selection-box/selection-box.util', () => ({
  getFields: jest.fn(),
}));

describe('DropDownModel Component', () => {
  const mockStore = configureMockStore();
  let store: any;

  const initialState = {
    stages: {
      stages: [{ stageInfo: { products: [{ product_type: '601' }] } }],
      userInput: { applicants: [] },
    },
  };

  const props = {
    logicalFieldName: 'credit_into',
    selectedOption: [{ CODE_VALUE: '123', CODE_DESC: 'Test Option', checked: false }],
    selectedValue: [{ CODE_VALUE: '123' }],
    label: 'Test Label',
    close: jest.fn(),
    addUserInput: jest.fn(),
    handleCallback: jest.fn(),
    handleFieldDispatch: jest.fn(),
    value: 'Test Value',
  };

  beforeEach(() => {
    store = mockStore(initialState);
    jest.clearAllMocks();
  });

  it('renders the component correctly', () => {
    render(
      <Provider store={store}>
        <DropDownModel {...props} />
      </Provider>
    );
    expect(screen.getByText('Test Label')).toBeInTheDocument();
  });

  it('displays options based on props.selectedOption', () => {
    render(
      <Provider store={store}>
        <DropDownModel {...props} />
      </Provider>
    );
    expect(screen.getByLabelText('Test Option')).toBeInTheDocument();
  });

  it('triggers addUserInput when an option is clicked', () => {
    render(
      <Provider store={store}>
        <DropDownModel {...props} />
      </Provider>
    );
    const radioInput = screen.getByLabelText('Test Option');
    fireEvent.click(radioInput);
    expect(props.addUserInput).toHaveBeenCalledWith(props.selectedOption[0]);
  });

  it('dispatches getFields when logicalFieldName is credit_into', () => {
    (getFields as jest.Mock).mockReturnValue([{ CODE_VALUE: 'Field1' }]);

    render(
      <Provider store={store}>
        <DropDownModel {...props} />
      </Provider>
    );

    // Validate dispatch
    const actions = store.getActions();
    expect(actions).toEqual([]); // No actions dispatched directly; `getFields` is called within `useEffect`.
    expect(getFields).toHaveBeenCalledWith(
      initialState.stages.stages,
      '123',
      'credit_into'
    );
  });

  it('shows label if product_type is 601', () => {
    render(
      <Provider store={store}>
        <DropDownModel {...props} />
      </Provider>
    );
    expect(screen.getByText('Test Label')).toBeInTheDocument();
  });

  it('handles close button click', () => {
    render(
      <Provider store={store}>
        <DropDownModel {...props} />
      </Provider>
    );
    const closeButton = screen.getByText(/close/i);
    fireEvent.click(closeButton);
    expect(props.close).toHaveBeenCalled();
  });
});
