import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import configureStore from "redux-mock-store";
import { Provider } from "react-redux";
import Amount from "./Amount";
import { fieldIdAppend } from "../../../utils/common/change.utils";
import loanDetailsConst from "../../../assets/_json/loan-details.json";

// Mock dependencies
jest.mock("../../../utils/common/change.utils", () => ({
  ...jest.requireActual("../../../utils/common/change.utils"),
  fieldIdAppend: jest.fn(() => "mock-field-id"),
  isFieldUpdate: jest.fn(),
  isFieldValueUpdate: jest.fn(),
  fieldError: jest.fn(),
}));

// Mock validation service
jest.mock("../../../services/validation-service", () => ({
  allowOnlyCharacter: jest.fn(),
}));

// Mock props
const mockProps = {
  data: {
    logical_field_name: "required_annual_income",
    rwb_label_name: "Annual Income",
    type: "text",
    min_length: 1,
    length: 10,
  },
  handleCallback: jest.fn(),
};

// Mock Redux store
const mockStore = configureStore([]);
const initialState = {
  stages: {
    stages: [
      {
        stageInfo: {
          applicants: {
            annual_income_a_1: "1200",
          },
        },
      },
    ],
    userInput: {
      applicants: {
        required_annual_income_a_1: "1200",
      },
    },
  },
  fielderror: {
    error: [],
  },
};

describe("Amount Component", () => {
  let store;

  beforeEach(() => {
    store = mockStore(initialState);
  });

  it("renders the component with correct label and input", () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );

    expect(screen.getByLabelText("Annual Income")).toBeInTheDocument();
    expect(screen.getByPlaceholderText("Annual Income")).toBeInTheDocument();
  });

  it("updates input value and triggers changeHandler", () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );

    const input = screen.getByLabelText("Annual Income");
    fireEvent.change(input, { target: { value: "1500" } });

    expect(input.value).toBe("1500");
    expect(mockProps.handleCallback).toHaveBeenCalledWith(
      mockProps.data,
      "1500"
    );
  });

  it("displays error if income is below minimum", () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );

    const input = screen.getByLabelText("Annual Income");
    fireEvent.change(input, { target: { value: "900" } });

    expect(mockProps.handleCallback).toHaveBeenCalledWith(mockProps.data, "");
    expect(screen.getByText(/greater than or equal to 1000/)).toBeInTheDocument();
  });

  it("formats currency correctly on blur", () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );

    const input = screen.getByLabelText("Annual Income");
    fireEvent.blur(input, { target: { value: "1500" } });

    expect(input.value).toBe("1,500");
  });

  it("calls allowOnlyCharacter on key press", () => {
    const { allowOnlyCharacter } = require("../../../services/validation-service");

    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );

    const input = screen.getByLabelText("Annual Income");
    fireEvent.keyPress(input, { key: "A" });

    expect(allowOnlyCharacter).toHaveBeenCalled();
  });

  it("dispatches actions on component load", () => {
    const { isFieldUpdate } = require("../../../utils/common/change.utils");

    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );

    expect(isFieldUpdate).toHaveBeenCalled();
    expect(mockProps.handleCallback).toHaveBeenCalledWith(
      mockProps.data,
      loanDetailsConst.minAnnualIncome.toString()
    );
  });

  it("handles user input from Redux store", () => {
    const customState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        userInput: {
          applicants: {
            required_annual_income_a_1: "2000",
          },
        },
      },
    };

    store = mockStore(customState);

    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );

    const input = screen.getByLabelText("Annual Income");
    expect(input.value).toBe("2,000");
  });

  it("displays no error for valid inputs", () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );

    const input = screen.getByLabelText("Annual Income");
    fireEvent.change(input, { target: { value: "1200" } });

    expect(screen.queryByText(/greater than or equal to 1000/)).toBeNull();
  });
});
