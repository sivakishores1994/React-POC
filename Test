import { AppDispatch } from "../../../services/common-service";
import { FindIndex,getUrl } from "../../../utils/common/change.utils";
import { KeyWithAnyModel, StageDetails } from "../../../utils/model/common-model";
import { fieldErrorAction } from "../../../utils/store/field-error-slice";
import { stagesAction } from "../../../utils/store/stages-slice";

export const getFields = (getStages: Array<StageDetails>, selectedOption: string, fieldName: string): any => {
    return (dispatch: AppDispatch) => {
        
        let fields: Array<KeyWithAnyModel> | undefined;

        if (getStages && getStages[0].stageInfo && getStages[0].stageInfo.fieldMetaData && getStages[0].stageInfo.fieldMetaData.data.stages) {
            const stageId = getStages[0].stageId === 'ssf-1' ? 'ssf-2' : getStages[0].stageId;
            const stageIndex = FindIndex(getStages[0].stageInfo, stageId);
            fields = getStages[0].stageInfo.fieldMetaData.data.stages[stageIndex].fields;
        }
        if (fieldName === 'credit_into') {
            let ssfStages: Array<string> | null = null;
            let showFields: Array<string> = [];
            let removeFields: Array<string> = [];
            const userSelection = {
                logical_field_name: fieldName,
                selectedOption: selectedOption
            };
            dispatch(stagesAction.resetDefaultValue(userSelection));
            if (selectedOption === 'Other Bank Account') {
                showFields = ['other_bank_name', 'other_bank_account_bt', 'reenter_other_bank_account_bt'];
            } else {
                removeFields = ['other_bank_name', 'other_bank_account_bt', 'reenter_other_bank_account_bt'];
            }
            ssfStages = showFields;
            dispatch(fieldErrorAction.removeMandatoryFields([...removeFields, ""]));
            const valObj: any = {
                'other_bank_name_a_1': '',
                'other_bank_account_bt_a_1': '',
                'reenter_other_bank_account_bt_a_1': ''
            }
            for (let key in valObj) {
                valObj[key] = getUrl.getUserInputs()[key] || '';
            }
              dispatch(
                stagesAction.removeAddToggleField({
                    removeFields: removeFields,
                    newFields: ssfStages,
                    value: valObj
                })
             );
            if (ssfStages && fields) {
                dispatch(fieldErrorAction.getMandatoryFields(ssfStages));
                return fields.filter((field: KeyWithAnyModel) =>
                    ssfStages!.includes(field.logical_field_name)
                );
            }
        }
    }
}
