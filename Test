import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { Provider } from "react-redux";
import configureStore from "redux-mock-store";
import TypeAhead from "../TypeAhead"; 

const mockStore = configureStore([]);

describe("TypeAhead Component", () => {
  let store;
  let mockProps;

  beforeEach(() => {
    store = mockStore({
      lov: { lov: [] },
      fielderror: { error: {} },
      stages: { stages: [{ stageInfo: { applicants: {} } }] },
    });

    mockProps = {
      data: {
        logical_field_name: "name_of_employer",
        rwb_label_name: "Employer Name",
      },
      handleCallback: jest.fn(),
      handleFieldDispatch: jest.fn(),
      value: "",
    };
  });

  it("renders without crashing", () => {
    render(
      <Provider store={store}>
        <TypeAhead {...mockProps} />
      </Provider>
    );

    expect(screen.getByLabelText(/Employer Name/i)).toBeInTheDocument();
  });

  it("opens dropdown on click", () => {
    render(
      <Provider store={store}>
        <TypeAhead {...mockProps} />
      </Provider>
    );

    const field = screen.getByLabelText(/Employer Name/i);
    fireEvent.click(field);
    expect(screen.getByPlaceholderText("Type here to search")).toBeInTheDocument();
  });

  it("handles search input change", () => {
    render(
      <Provider store={store}>
        <TypeAhead {...mockProps} />
      </Provider>
    );

    const field = screen.getByLabelText(/Employer Name/i);
    fireEvent.click(field);
    const searchInput = screen.getByPlaceholderText("Type here to search");
    fireEvent.change(searchInput, { target: { value: "Test Company" } });
    expect(searchInput.value).toBe("Test Company");
  });

  it("selects an option when clicked", () => {
    store = mockStore({
      lov: { lov: [{ label: "name_of_employer", value: [{ CODE_DESC: "Google", CODE_VALUE: "1234" }] }] },
      fielderror: { error: {} },
      stages: { stages: [{ stageInfo: { applicants: {} } }] },
    });

    render(
      <Provider store={store}>
        <TypeAhead {...mockProps} />
      </Provider>
    );

    fireEvent.click(screen.getByLabelText(/Employer Name/i));
    fireEvent.click(screen.getByLabelText("Google"));
    expect(mockProps.handleCallback).toHaveBeenCalledWith(mockProps.data, "1234");
  });

  it("displays error message when there's an error", () => {
    store = mockStore({
      lov: { lov: [] },
      fielderror: { error: { name_of_employer: "Error message" } },
      stages: { stages: [{ stageInfo: { applicants: {} } }] },
    });

    render(
      <Provider store={store}>
        <TypeAhead {...mockProps} />
      </Provider>
    );

    expect(screen.getByText("Please enter Employer Name")).toBeInTheDocument();
  });
});

