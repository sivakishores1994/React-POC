import { getFields } from './path-to-get-fields';
import { fieldErrorAction } from '../../../utils/store/field-error-slice';
import { stagesAction } from '../../../utils/store/stages-slice';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';

const mockStore = configureStore([thunk]);

describe('getFields', () => {
  let store: any;

  beforeEach(() => {
    store = mockStore({});
    store.dispatch = jest.fn(); // Mock dispatch
  });

  it('should return fields for a valid stage and dispatch removeMandatoryFields actions', () => {
    const mockStages = [
      {
        stageId: 'ad-2',
        stageInfo: {
          fieldmetadata: {
            data: {
              stages: [
                {
                  stageId: 'ad',
                  fields: [{ logical_field_name: 'NRIC' }],
                },
              ],
            },
          },
          applicants: { NRIC_a_1: 'S1234567A' },
        },
      },
    ];

    const mockRadioResidency = { logical_field_name: 'residency_status', value: 'CT' };

    const result = getFields(mockStages, mockRadioResidency)(store.dispatch);

    expect(result).toEqual([{ logical_field_name: 'NRIC' }]);
    expect(store.dispatch).toHaveBeenCalledWith(fieldErrorAction.removeMandatoryFields(['passport_no']));
    expect(store.dispatch).toHaveBeenCalledWith(
      stagesAction.removeAddToggleField({
        removeFields: ['passport_no'],
        newFields: ['NRIC'],
        value: 'S1234567A',
      })
    );
  });

  it('should return null if no matching fields are found', () => {
    const mockStages = [
      {
        stageId: 'non-existent',
        stageInfo: {
          fieldmetadata: {
            data: {
              stages: [],
            },
          },
        },
      },
    ];

    const result = getFields(mockStages, null)(store.dispatch);

    expect(result).toBeNull();
  });

  it('should handle work_type logic and dispatch actions correctly', () => {
    const mockStages = [
      {
        stageId: 'bd-1',
        stageInfo: {
          fieldmetadata: {
            data: {
              stages: [
                {
                  stageId: 'bd',
                  fields: [
                    { logical_field_name: 'name_of_employer' },
                    { logical_field_name: 'job_title' },
                  ],
                },
              ],
            },
          },
        },
      },
    ];

    const mockRadioResidency = { logical_field_name: 'work_type', value: 'S' };

    getFields(mockStages, mockRadioResidency)(store.dispatch);

    expect(store.dispatch).toHaveBeenCalledWith(stagesAction.resetDefaultValue({ logical_field_name: 'work_type', value: 'S' }));
    expect(store.dispatch).toHaveBeenCalledWith(stagesAction.resetNewAndOldFields());
    expect(store.dispatch).toHaveBeenCalledWith(
      fieldErrorAction.removeMandatoryFields(['name_of_business', 'nature_of_employer', 'job_title', 'office_phone_number'])
    );
    expect(store.dispatch).toHaveBeenCalledWith(
      stagesAction.removeAddToggleField({
        removeFields: ['name_of_business', 'nature_of_employer', 'job_title', 'office_phone_number'],
        newFields: ['name_of_employer', 'nature_of_employer', 'job_title', 'office_phone_number'],
        value: {
          nature_of_employer_a_1: '',
          job_title_a_1: '',
          name_of_employer_a_1: '',
          office_phone_number_a_1: '',
        },
      })
    );
  });

  it('should handle preferred_limit logic and dispatch correct actions', () => {
    const mockStages = [
      {
        stageId: 'bd-1',
        stageInfo: {
          fieldmetadata: {
            data: {
              stages: [
                {
                  stageId: 'bd',
                  fields: [
                    { logical_field_name: 'preferred_credit_limit' },
                    { logical_field_name: 'credit_limit_consent_info_5' },
                  ],
                },
              ],
            },
          },
        },
      },
    ];

    const mockRadioResidency = { logical_field_name: 'preferred_limit', value: '1' };

    getFields(mockStages, mockRadioResidency)(store.dispatch);

    expect(store.dispatch).toHaveBeenCalledWith(
      fieldErrorAction.removeMandatoryFields(['credit_limit_consent_info_8'])
    );
    expect(store.dispatch).toHaveBeenCalledWith(
      stagesAction.removeAddToggleField({
        removeFields: ['credit_limit_consent_info_8'],
        newFields: ['preferred_credit_limit', 'credit_limit_consent_info_5'],
        value: '',
      })
    );
  });

  it('should handle empty inputs and return null', () => {
    const result = getFields([], null)(store.dispatch);
    expect(result).toBeNull();
  });
});
