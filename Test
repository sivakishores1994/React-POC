import React from "react";
import { render } from "@testing-library/react";
import { Provider } from "react-redux";
import configureStore from "redux-mock-store";
import { Header } from "./Header";
import { getUrl } from "../../../utils/common/change.utils";

// Mocking the necessary utilities
jest.mock("../../../utils/common/change.utils", () => ({
  getUrl: {
    getParameterByName: jest.fn().mockReturnValue(null), // You can adjust based on your test case
  },
}));

// Mock the components used inside Header
jest.mock("../../../shared/components/close/close", () => () => (
  <div data-testid="close-button">Close Button</div>
));

jest.mock("../../../shared/components/logo/logo", () => () => (
  <div data-testid="logo">Logo</div>
));

jest.mock("../../../utils/common/header-titles", () =>
  jest.fn(() => "Mocked Header Title")
);

const mockStore = configureStore([]);

describe("Header Component", () => {
  let store: any;

  beforeEach(() => {
    // Mocking the store structure for stages
    store = mockStore({
      stages: {
        stages: [
          {
            stageId: "testStage",
            stageInfo: {
              application: { journey_type: "ETC" },
              products: [
                {
                  name: "Product Name",
                  product_category: "CC",
                  product_type: "280",
                },
              ],
            },
          },
        ],
        journeyType: "ETC",
      },
    });

    // Mocking the store.getState() call to return the correct value
    jest.spyOn(store, "getState").mockReturnValue({
      stages: {
        stages: [
          {
            stageId: "testStage",
            stageInfo: {
              application: { journey_type: "ETC" },
              products: [
                {
                  name: "Product Name",
                  product_category: "CC",
                  product_type: "280",
                },
              ],
            },
          },
        ],
        journeyType: "ETC",
      },
    });
  });

  it("renders without crashing", () => {
    const { getByText } = render(
      <Provider store={store}>
        <Header />
      </Provider>
    );

    // Check if the mocked title is rendered correctly
    expect(getByText("Mocked Header Title")).toBeInTheDocument();
  });

  // Additional test cases can go here
});
