import { getProductInfo } from './yourFile'; // import the function
import { urlParamAction } from '../utils/store/urlparam-slice'; // import the action to check dispatch
import { dispatchError } from '../utils/store/error-slice'; // import dispatchError to test error handling
import { AppDispatch } from '../utils/store/store'; // import AppDispatch for typing

jest.mock('../utils/store/urlparam-slice', () => ({
  urlParamAction: {
    productDetails: jest.fn(),
  },
}));

jest.mock('../utils/store/error-slice', () => ({
  dispatchError: jest.fn(),
}));

// Mocking getUrl.getParameterByName to simulate URL parameters
jest.mock('../utils/common/change.utils', () => ({
  getUrl: {
    getParameterByName: jest.fn(),
  },
}));

// Mock localStorage
global.localStorage = {
  setItem: jest.fn(),
  getItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn(),
};

describe('getProductInfo', () => {
  const productInfoResponse = [
    { product_type: 'A', name: 'Product A' },
    { product_type: 'B', name: 'Product B' },
    { product_type: 'C', name: 'Product C' },
  ];

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should dispatch productDetails with filtered products based on the input', async () => {
    const products = 'A,B'; // selected product types
    const dispatch = jest.fn();

    // Mock getUrl parameters (no campaign or intcid)
    require('../utils/common/change.utils').getUrl.getParameterByName.mockReturnValue(null);

    await getProductInfo(products, productInfoResponse)(dispatch);

    // Check if localStorage is set with filtered products
    expect(localStorage.setItem).toHaveBeenCalledWith(
      'products',
      JSON.stringify([
        { product_type: 'A', name: 'Product A' },
        { product_type: 'B', name: 'Product B' },
      ])
    );

    // Check if the productDetails action was dispatched with the filtered products
    expect(dispatch).toHaveBeenCalledWith(
      urlParamAction.productDetails([
        { product_type: 'A', name: 'Product A' },
        { product_type: 'B', name: 'Product B' },
      ])
    );
  });

  it('should dispatch error if no matching products are found', async () => {
    const products = 'D'; // a product type that doesn't exist in the response
    const dispatch = jest.fn();

    // Mock getUrl parameters (no campaign or intcid)
    require('../utils/common/change.utils').getUrl.getParameterByName.mockReturnValue(null);

    await getProductInfo(products, productInfoResponse)(dispatch);

    // Check if dispatchError action was called
    expect(dispatch).toHaveBeenCalledWith(
      dispatchError({
        response: {
          status: 'error',
          statusText: 'no response',
        },
      })
    );
  });

  it('should add campaign if it exists in the URL', async () => {
    const products = 'A';
    const dispatch = jest.fn();
    const campaign = 'summer2024'; // Mocked campaign value

    // Mock getUrl parameters with a campaign
    require('../utils/common/change.utils').getUrl.getParameterByName.mockReturnValueOnce(campaign);

    await getProductInfo(products, productInfoResponse)(dispatch);

    // Check if the campaign is added to the filtered product
    expect(localStorage.setItem).toHaveBeenCalledWith(
      'products',
      JSON.stringify([
        { product_type: 'A', name: 'Product A', campaign },
      ])
    );

    // Check if the productDetails action was dispatched with the product that has the campaign
    expect(dispatch).toHaveBeenCalledWith(
      urlParamAction.productDetails([
        { product_type: 'A', name: 'Product A', campaign },
      ])
    );
  });

  it('should update localStorage with intcid if it exists in the URL', async () => {
    const products = 'A';
    const dispatch = jest.fn();
    const intcid = '12345'; // Mocked intcid

    // Mock getUrl parameters with intcid
    require('../utils/common/change.utils').getUrl.getParameterByName.mockReturnValueOnce(intcid);

    await getProductInfo(products, productInfoResponse)(dispatch);

    // Check if localStorage was updated with intcid
    expect(localStorage.setItem).toHaveBeenCalledWith('intcid', intcid);
  });

  it('should handle empty products string gracefully', async () => {
    const products = ''; // empty products string
    const dispatch = jest.fn();

    // Mock getUrl parameters (no campaign or intcid)
    require('../utils/common/change.utils').getUrl.getParameterByName.mockReturnValue(null);

    await getProductInfo(products, productInfoResponse)(dispatch);

    // Ensure no dispatch or localStorage changes occur when no products are selected
    expect(dispatch).not.toHaveBeenCalled();
    expect(localStorage.setItem).not.toHaveBeenCalled();
  });
});
